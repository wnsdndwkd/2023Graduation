// Generated by gencpp from file kukirun_msgs/Traffic.msg
// DO NOT EDIT!


#ifndef KUKIRUN_MSGS_MESSAGE_TRAFFIC_H
#define KUKIRUN_MSGS_MESSAGE_TRAFFIC_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kukirun_msgs
{
template <class ContainerAllocator>
struct Traffic_
{
  typedef Traffic_<ContainerAllocator> Type;

  Traffic_()
    : trafficsign(0)
    , trafficsign_1(0)
    , trafficsign_2(0)
    , trafficsign_3(0)  {
    }
  Traffic_(const ContainerAllocator& _alloc)
    : trafficsign(0)
    , trafficsign_1(0)
    , trafficsign_2(0)
    , trafficsign_3(0)  {
  (void)_alloc;
    }



   typedef int32_t _trafficsign_type;
  _trafficsign_type trafficsign;

   typedef int32_t _trafficsign_1_type;
  _trafficsign_1_type trafficsign_1;

   typedef int32_t _trafficsign_2_type;
  _trafficsign_2_type trafficsign_2;

   typedef int32_t _trafficsign_3_type;
  _trafficsign_3_type trafficsign_3;





  typedef boost::shared_ptr< ::kukirun_msgs::Traffic_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kukirun_msgs::Traffic_<ContainerAllocator> const> ConstPtr;

}; // struct Traffic_

typedef ::kukirun_msgs::Traffic_<std::allocator<void> > Traffic;

typedef boost::shared_ptr< ::kukirun_msgs::Traffic > TrafficPtr;
typedef boost::shared_ptr< ::kukirun_msgs::Traffic const> TrafficConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kukirun_msgs::Traffic_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kukirun_msgs::Traffic_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kukirun_msgs::Traffic_<ContainerAllocator1> & lhs, const ::kukirun_msgs::Traffic_<ContainerAllocator2> & rhs)
{
  return lhs.trafficsign == rhs.trafficsign &&
    lhs.trafficsign_1 == rhs.trafficsign_1 &&
    lhs.trafficsign_2 == rhs.trafficsign_2 &&
    lhs.trafficsign_3 == rhs.trafficsign_3;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kukirun_msgs::Traffic_<ContainerAllocator1> & lhs, const ::kukirun_msgs::Traffic_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kukirun_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kukirun_msgs::Traffic_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kukirun_msgs::Traffic_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kukirun_msgs::Traffic_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kukirun_msgs::Traffic_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kukirun_msgs::Traffic_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kukirun_msgs::Traffic_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kukirun_msgs::Traffic_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c68a17eb503576fe17e72e4e585ded61";
  }

  static const char* value(const ::kukirun_msgs::Traffic_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc68a17eb503576feULL;
  static const uint64_t static_value2 = 0x17e72e4e585ded61ULL;
};

template<class ContainerAllocator>
struct DataType< ::kukirun_msgs::Traffic_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kukirun_msgs/Traffic";
  }

  static const char* value(const ::kukirun_msgs::Traffic_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kukirun_msgs::Traffic_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 trafficsign\n"
"int32 trafficsign_1\n"
"int32 trafficsign_2\n"
"int32 trafficsign_3\n"
;
  }

  static const char* value(const ::kukirun_msgs::Traffic_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kukirun_msgs::Traffic_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.trafficsign);
      stream.next(m.trafficsign_1);
      stream.next(m.trafficsign_2);
      stream.next(m.trafficsign_3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Traffic_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kukirun_msgs::Traffic_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kukirun_msgs::Traffic_<ContainerAllocator>& v)
  {
    s << indent << "trafficsign: ";
    Printer<int32_t>::stream(s, indent + "  ", v.trafficsign);
    s << indent << "trafficsign_1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.trafficsign_1);
    s << indent << "trafficsign_2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.trafficsign_2);
    s << indent << "trafficsign_3: ";
    Printer<int32_t>::stream(s, indent + "  ", v.trafficsign_3);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KUKIRUN_MSGS_MESSAGE_TRAFFIC_H
